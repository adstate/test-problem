{"version":3,"sources":["models/nodeState.ts","actions/cacheActionTypes.ts","actions/cache.ts","actions/databaseActionTypes.ts","utils/dbToTree.ts","actions/database.ts","components/DbTreeView.tsx","components/CacheNodeEditor.tsx","components/Sidebar.tsx","components/CacheNodeDelete.tsx","components/CacheTreeView.tsx","selectors/index.ts","components/DbEditor.tsx","App.tsx","reportWebVitals.ts","reducers/cache.ts","reducers/database.ts","reducers/index.ts","store/index.ts","index.tsx"],"names":["NodeState","MOVE_NODE","ADD_NODE","CHANGE_NODE","DELETE_NODE","CLEAR_CACHE","editNode","id","value","dispatch","getState","node","cache","table","cacheNode","state","New","Changed","type","payload","changeNode","addNode","parentId","sequence","nodeId","prefix","next","getChildren","Object","values","filter","deleteNode","deletedNodes","Deleted","childs","children","forEach","push","length","nodes","clearCache","APPLY_CHANGES","SET_SEQUENCE","RESET_DATABASE","UPDATE_INDEX","dbToTree","items","rootItems","lookup","orphanIds","Set","item","itemId","prototype","hasOwnProperty","call","has","delete","treeItem","add","size","Array","from","createDbParentIndex","index","getNodeForEdit","database","moveNode","Origin","applyChangesToDb","dbSequence","dbIndex","changes","String","keys","applyChanges","newIndex","resetDatabase","Container","styled","div","Toolbar","TreeViewContainer","StyledTreeItem","TreeItem","selected","DbTreeView","dbTree","useDispatch","onLabelClick","useCallback","event","preventDefault","moveNodeHandler","Button","variant","onClick","TreeView","defaultCollapseIcon","defaultExpanded","defaultExpandIcon","onNodeSelect","nodeState","target","closest","getAttribute","renderTree","label","isArray","map","React","memo","Content","Header","h4","Footer","CacheNodeEditor","onSave","onClose","useSelector","s","parentNode","useState","newValue","setNewValue","useEffect","onSubmit","Input","fullWidth","onChange","disabled","Sidebar","CacheNodeDelete","onDelete","TreeViewToolbar","CacheTreeView","cacheTree","expanded","expandedNodes","setExpandedNodes","operation","setOperation","onEditNodeHandler","onAddNodeHandler","onDeleteNodeHandler","onCloseEdit","changeNodeHandler","addNodeHandler","deleteNodeHandler","onNodeToggle","nodeIds","ButtonGroup","color","getCache","getCacheTree","createSelector","getDatabaseTree","getCacheNodeIds","Paper","EditorContent","EditorFooter","DbEditor","cacheExpanded","AppContainer","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","rootReducer","combineReducers","action","middlewares","thunk","store","createStore","applyMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.67eef58b.chunk.js","sourcesContent":["enum NodeState {\r\n    New = 'NEW',\r\n    Changed = 'CHANGED',\r\n    Deleted = 'DELETED',\r\n    Origin = 'ORIGIN'\r\n}\r\n\r\nexport default NodeState;\r\n","import DbNode from '../models/dbNode';\r\nimport DbTable from '../models/dbTable';\r\n\r\nexport const MOVE_NODE = 'MOVE_NODE';\r\nexport const EDIT_NODE = 'EDIT_NODE';\r\nexport const ADD_NODE = 'ADD_NODE';\r\nexport const CHANGE_NODE = 'CHANGE_NODE';\r\nexport const DELETE_NODE = 'DELETE_NODE';\r\nexport const CLEAR_CACHE = 'CLEAR_CACHE';\r\nexport const SEQUENCE_NEXT = 'SEQUENCE_NEXT';\r\n\r\n\r\ninterface MoveNodeAction {\r\n    type: typeof MOVE_NODE,\r\n    payload: DbNode\r\n}\r\n\r\ninterface AddCacheNodeAction {\r\n    type: typeof ADD_NODE;\r\n    payload: {\r\n        id: string,\r\n        node: DbNode\r\n    }\r\n}\r\n\r\ninterface ChangeNodeAction {\r\n    type: typeof CHANGE_NODE;\r\n    payload: {\r\n        id: string;\r\n        node: DbNode;\r\n    };\r\n}\r\n\r\ninterface DeleteNodeAction {\r\n    type: typeof DELETE_NODE;\r\n    payload: {\r\n        nodes: DbTable;\r\n    };\r\n}\r\n\r\ninterface SequenceNextAction {\r\n    type: typeof SEQUENCE_NEXT;\r\n}\r\n\r\ninterface ClearCacheAction {\r\n    type: typeof CLEAR_CACHE;\r\n}\r\n\r\nexport type CacheActions = MoveNodeAction | AddCacheNodeAction | ChangeNodeAction | SequenceNextAction | ClearCacheAction | DeleteNodeAction;\r\n","import {MOVE_NODE, ADD_NODE, CHANGE_NODE, CacheActions, CLEAR_CACHE, DELETE_NODE} from './cacheActionTypes';\r\nimport DbNode from '../models/dbNode';\r\nimport { RootState } from '../reducers';\r\nimport NodeState from '../models/nodeState';\r\nimport DbTable from '../models/dbTable';\r\n\r\n\r\nexport const moveNode = (node: DbNode): CacheActions => ({\r\n    type: MOVE_NODE,\r\n    payload: node\r\n});\r\n\r\nexport const addCacheNode = (id: string, node: DbNode): CacheActions => ({\r\n    type: ADD_NODE,\r\n    payload: {\r\n        id,\r\n        node\r\n    }\r\n});\r\n\r\nexport const changeNode = (id: string, node: DbNode): CacheActions => ({\r\n    type: CHANGE_NODE,\r\n    payload: {\r\n        id,\r\n        node\r\n    }\r\n});\r\n\r\nexport const deleteNodes = (nodes: DbTable): CacheActions => ({\r\n    type: DELETE_NODE,\r\n    payload: {\r\n        nodes\r\n    }\r\n});\r\n\r\nexport const editNode = (id: string, value: string) => {\r\n    return (dispatch: any, getState: () => RootState) => {\r\n        const cache = getState().cache.table;\r\n        const node = cache[id];\r\n\r\n        if (node) {\r\n            const cacheNode = {\r\n                ...node,\r\n                value,\r\n                state: (node.state === NodeState.New) ? NodeState.New : NodeState.Changed\r\n            };\r\n            dispatch(changeNode(id, cacheNode));\r\n        }\r\n    }\r\n};\r\n\r\nexport const addNode = (parentId: string, value: string) => {\r\n    return (dispatch: any, getState: () => RootState) => {\r\n        const sequence = getState().cache.sequence;\r\n        const nodeId = sequence.prefix + sequence.next;\r\n\r\n        const cacheNode = {\r\n            id: nodeId,\r\n            parentId,\r\n            value,\r\n            state: NodeState.New\r\n        };\r\n        \r\n        dispatch(addCacheNode(nodeId, cacheNode));\r\n    }\r\n};\r\n\r\nconst getChildren = (nodeId: string, cache: DbTable) => {\r\n    return Object.values(cache).filter((node: DbNode) => node.parentId === nodeId) || [];\r\n};\r\n\r\nexport const deleteNode = (id: string) => {\r\n    return (dispatch: any, getState: () => RootState) => {\r\n        const cache = getState().cache.table;\r\n        const node = getState().cache.table[id];\r\n\r\n        const deletedNodes: DbTable = {};\r\n\r\n        if (node.state === NodeState.New) {\r\n            delete cache[id];\r\n        } else {\r\n            deletedNodes[id] = {...node, state: NodeState.Deleted};\r\n        }\r\n\r\n        let childs = getChildren(id, cache);\r\n\r\n        while (childs.length > 0) {\r\n            const children: DbNode[] = [];\r\n            childs.forEach((node: DbNode) => {\r\n                if (node.state === NodeState.New) {\r\n                   delete cache[node.id];\r\n                } else {\r\n                    deletedNodes[node.id] = {...node, state: NodeState.Deleted};\r\n                }\r\n                \r\n                children.push(...getChildren(node.id, cache));\r\n            });\r\n\r\n            childs = children;\r\n        }\r\n\r\n        dispatch(deleteNodes(deletedNodes));\r\n    }\r\n};\r\n\r\nexport const clearCache = () => ({\r\n    type: CLEAR_CACHE\r\n});\r\n","import DbIndex from '../models/dbIndex';\r\nimport DbTable from '../models/dbTable';\r\n\r\nexport const APPLY_CHANGES = 'APPLY_CHANGES';\r\nexport const NEXT_ID = 'NEXT_ID';\r\nexport const SET_SEQUENCE = 'SET_SEQUENCE';\r\nexport const RESET_DATABASE = 'RESET_DATABASE';\r\nexport const UPDATE_INDEX = 'UPDATE_INDEX';\r\n\r\ninterface SetSequenceAction {\r\n    type: typeof SET_SEQUENCE;\r\n    payload: {\r\n        next: number;\r\n    }\r\n}\r\n\r\ninterface ResetDbAction {\r\n    type: typeof RESET_DATABASE;\r\n}\r\n\r\ninterface ApplyChangesAction {\r\n    type: typeof APPLY_CHANGES;\r\n    payload: {\r\n        changes: DbTable;\r\n    }\r\n}\r\n\r\ninterface UpdateIndexAction {\r\n    type: typeof UPDATE_INDEX;\r\n    payload: {\r\n        index: DbIndex;\r\n    }\r\n}\r\n\r\nexport type DatabaseActions = SetSequenceAction | ResetDbAction | ApplyChangesAction | UpdateIndexAction;\r\n","import DbIndex from '../models/dbIndex';\r\nimport DbTable from '../models/dbTable';\r\nimport NodeState from '../models/nodeState';\r\n\r\ninterface TreeNode {\r\n  id?: string;\r\n  parentId?: string | null;\r\n  value?: string;\r\n  state?: NodeState;\r\n  children: TreeNode[]\r\n}\r\n\r\nexport default function dbToTree(items: DbTable): TreeNode[] {\r\n    const rootItems: TreeNode[] = [];\r\n    const lookup: { [id: string]: TreeNode } = {};\r\n\r\n    const orphanIds: null | Set<string> = new Set();    \r\n  \r\n    for (const item of Object.values(items)) {\r\n      const itemId = item.id;\r\n      const parentId = item.parentId;\r\n  \r\n      if (!Object.prototype.hasOwnProperty.call(lookup, itemId)) {\r\n        lookup[itemId] = { children: [] };\r\n      }\r\n\r\n      if (orphanIds.has(itemId)) {\r\n        orphanIds.delete(itemId);\r\n      }\r\n\r\n      lookup[itemId] = {\r\n        ...item,\r\n        'children': lookup[itemId]['children']\r\n      };\r\n  \r\n      const treeItem = lookup[itemId];\r\n  \r\n      if (!parentId) {\r\n        rootItems.push(treeItem);\r\n      } else {\r\n        if (!Object.prototype.hasOwnProperty.call(lookup, parentId)) {\r\n          lookup[parentId] = { children: [] };\r\n          orphanIds.add(parentId);\r\n        }\r\n        \r\n        lookup[parentId]['children'].push(treeItem);\r\n      }\r\n    }\r\n\r\n    if (orphanIds.size > 0) {\r\n      for (let id of Array.from(orphanIds)) {\r\n        rootItems.push(...lookup[id].children);\r\n      }\r\n    }\r\n  \r\n    return rootItems;\r\n}\r\n\r\nexport function createDbParentIndex(items: DbTable): DbIndex {\r\n  const index: DbIndex = {};\r\n\r\n  for (let node of Object.values(items)) {\r\n    if (!index[node.id]) {\r\n      index[node.id] = [];\r\n    }\r\n\r\n    if (node.parentId && index[node.parentId]) {\r\n      index[node.parentId].push(node.id);\r\n    }\r\n  }\r\n\r\n  return index;\r\n}\r\n","import { RootState } from \"../reducers\";\r\nimport {moveNode, clearCache} from './cache';\r\nimport NodeState from '../models/nodeState';\r\nimport DbTable from '../models/dbTable';\r\nimport {DatabaseActions, SET_SEQUENCE, APPLY_CHANGES, RESET_DATABASE, UPDATE_INDEX} from '../actions/databaseActionTypes';\r\nimport DbIndex from \"../models/dbIndex\";\r\nimport { createDbParentIndex } from \"../utils/dbToTree\";\r\n\r\nconst setSequence = (next: number): DatabaseActions => ({\r\n    type: SET_SEQUENCE,\r\n    payload: {\r\n        next\r\n    }\r\n});\r\n\r\nconst applyChanges = (changes: DbTable): DatabaseActions => ({\r\n    type: APPLY_CHANGES,\r\n    payload: {\r\n        changes\r\n    }\r\n});\r\n\r\nconst updateIndex = (index: DbIndex): DatabaseActions => ({\r\n    type: UPDATE_INDEX,\r\n    payload: {\r\n        index\r\n    }\r\n});\r\n\r\nexport const getNodeForEdit = (nodeId: string) => {\r\n    return (dispatch: any, getState: () => RootState) => {\r\n        const database = getState().database.table;\r\n        const cache = getState().cache.table;\r\n        const node = database[nodeId];\r\n\r\n        if (node && !cache[nodeId] && node.state !== NodeState.Deleted) {\r\n            const cacheNode = {\r\n                ...node,\r\n                state: NodeState.Origin\r\n            };\r\n\r\n            dispatch(moveNode(cacheNode));\r\n        }\r\n    };\r\n};\r\n\r\nexport const applyChangesToDb = () => {\r\n    return (dispatch: any, getState: () => RootState) => {\r\n        const cache = getState().cache.table;\r\n        const database = getState().database.table;\r\n        const dbSequence = getState().database.sequence;\r\n        const dbIndex = getState().database.index;\r\n        let id = dbSequence.next;\r\n\r\n        const changes: DbTable = {};\r\n        const lookup: {[id: string]: string} = {};\r\n\r\n        for (let node of Object.values(cache)) {\r\n            if (node.state === NodeState.New) {\r\n                const nodeId = String(id);\r\n                const parentId = (node.parentId && lookup[node.parentId]) ? lookup[node.parentId] : node.parentId;\r\n\r\n                changes[nodeId] = {\r\n                    id: nodeId,\r\n                    parentId: parentId,\r\n                    value: node.value,\r\n                    state: NodeState.Origin\r\n                };\r\n\r\n                lookup[node.id] = nodeId;\r\n\r\n                id += 1;\r\n            } else if (node.state === NodeState.Changed) {\r\n                changes[node.id] = {\r\n                    ...node,\r\n                    value: node.value,\r\n                    state: NodeState.Origin\r\n                };\r\n            } else if (node.state === NodeState.Deleted) {\r\n                changes[node.id] = {\r\n                    ...node,\r\n                    state: NodeState.Deleted\r\n                };\r\n\r\n                let childs = dbIndex[node.id];\r\n\r\n                while (childs.length > 0) {\r\n                    const children: string[] = [];\r\n\r\n                    childs.forEach((nodeId) => {\r\n                        changes[nodeId] = {\r\n                            ...database[nodeId],\r\n                            state: NodeState.Deleted\r\n                        };\r\n\r\n                        children.push(...dbIndex[nodeId]);\r\n                    });\r\n        \r\n                    childs = children;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (Object.keys(changes).length > 0) {\r\n            dispatch(applyChanges(changes));\r\n\r\n            const newIndex = createDbParentIndex(getState().database.table);\r\n            dispatch(updateIndex(newIndex));\r\n        }\r\n\r\n        dispatch(clearCache());\r\n\r\n        if (dbSequence.next !== id) {\r\n            dispatch(setSequence(id));\r\n        }\r\n    };\r\n};\r\n\r\nexport const resetDb = (): DatabaseActions => ({\r\n    type: RESET_DATABASE\r\n});\r\n\r\nexport const resetDatabase = () => {\r\n    return (dispatch: any) => {\r\n        dispatch(resetDb());\r\n        dispatch(clearCache());\r\n    };\r\n};\r\n","import React, {useCallback} from 'react';\r\nimport {useDispatch} from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport TreeView from '@material-ui/lab/TreeView';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport TreeItem from '@material-ui/lab/TreeItem';\r\nimport NodeState from '../models/nodeState';\r\nimport Button from '@material-ui/core/Button';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport {getNodeForEdit} from '../actions/database';\r\n\r\ninterface Props {\r\n    dbTree?: any;\r\n}\r\n\r\ninterface RenderTree {\r\n    id: string;\r\n    parentId: string | null;\r\n    value: string;\r\n    state: NodeState;\r\n    children?: RenderTree[];\r\n}\r\n\r\nconst Container = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n`;\r\n\r\nconst Toolbar = styled.div`\r\n    padding: 40px;\r\n`;\r\n\r\nconst TreeViewContainer = styled.div`\r\n    width: 250px;\r\n    height: 300px;\r\n    border: 1px solid #c0c0c0;\r\n    border-radius: 2px;\r\n    padding: 10px;\r\n    overflow-y: auto;\r\n`;\r\n\r\nconst StyledTreeItem = styled(TreeItem)<{state: NodeState}>`\r\n  ${({state}) => state === NodeState.Deleted && `\r\n    color: #c0c0c0;\r\n\r\n    & div.MuiTreeItem-label:hover {\r\n      background-color: #fff;\r\n    }\r\n\r\n    & div.MuiTreeItem-label {\r\n      background-color: #fff !important;\r\n      cursor: default;\r\n    }\r\n  `}\r\n`;\r\n\r\nlet selected = '';\r\n\r\nconst DbTreeView: React.FC<Props> = ({dbTree}) => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const onNodeSelect = (event: any, nodeId: string) => {\r\n      const nodeElement: Element = event.target.closest('.MuiTreeItem-root');\r\n      const nodeState = nodeElement.getAttribute('state');\r\n\r\n      if (nodeState === NodeState.Deleted) {\r\n        selected = '';\r\n      } else {\r\n        selected = nodeId;\r\n      }\r\n    };\r\n\r\n    const onLabelClick = useCallback((event: any) => {\r\n      event.preventDefault();\r\n    }, []);\r\n\r\n    const moveNodeHandler = useCallback(() => {\r\n        if (selected) {\r\n            dispatch(getNodeForEdit(selected));\r\n        }\r\n    }, [dispatch]);\r\n\r\n    const renderTree = (node: RenderTree) => (\r\n        <StyledTreeItem state={node.state} key={node.id} nodeId={node.id} label={node.value} onLabelClick={onLabelClick}>\r\n          {Array.isArray(node.children) && node.children.map((node) => renderTree(node))}\r\n        </StyledTreeItem>\r\n    );\r\n\r\n    return (\r\n        <Container>\r\n            <Toolbar>\r\n                <Button variant=\"contained\" onClick={moveNodeHandler}>\r\n                    <ChevronLeftIcon />\r\n                </Button>\r\n            </Toolbar>\r\n            <TreeViewContainer>\r\n                {\r\n                    dbTree && <TreeView\r\n                        defaultCollapseIcon={<ExpandMoreIcon />}\r\n                        defaultExpanded={['1', '2', '3', '4', '5']}\r\n                        defaultExpandIcon={<ChevronRightIcon />}\r\n                        onNodeSelect={onNodeSelect}\r\n                    >\r\n                        {renderTree(dbTree)}\r\n                    </TreeView>\r\n                }\r\n            </TreeViewContainer>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default React.memo(DbTreeView);\r\n","import React from 'react';\r\nimport {useSelector} from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport Input from '@material-ui/core/Input';\r\nimport Button from '@material-ui/core/Button';\r\nimport { RootState } from '../reducers';\r\n\r\ninterface Props {\r\n    nodeId?: string;\r\n    parentId?: string;\r\n    onSave: (nodeId: string, value: string) => void;\r\n    onClose: () => void;\r\n}\r\n\r\nconst Container = styled.div`\r\n    position: absolute;\r\n    top: 0;\r\n    right: 0;\r\n    display: flex;\r\n    justify-content: center;\r\n    background-color: #fff;\r\n    height: 100%;\r\n    padding: 20px;\r\n    width: 400px;\r\n    border-top-right-radius: 4px;\r\n    border-bottom-right-radius: 4px;\r\n    z-index: 2;\r\n`;\r\n\r\nconst Content = styled.div`\r\n    width: 300px;\r\n`;\r\n\r\nconst Header = styled.h4`\r\n    margin-top: 5px;\r\n    margin-bottom: 25px;\r\n`;\r\n\r\nconst Footer = styled.div`\r\n    display: flex;\r\n    justify-content: flex-end;\r\n    padding: 10px 0;\r\n    margin-top: 25px;\r\n\r\n    & .MuiButtonBase-root {\r\n        margin-right: 8px;\r\n    }\r\n`;\r\n\r\nconst CacheNodeEditor: React.FC<Props> = ({nodeId, parentId, onSave, onClose}) => {\r\n    const node = useSelector((s: RootState) => nodeId ? s.cache.table[nodeId] : null);\r\n    const parentNode = useSelector((s: RootState) => parentId ? s.cache.table[parentId] : null);\r\n\r\n    const [newValue, setNewValue] = React.useState<string>('');\r\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setNewValue(event.target.value);\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        if (node) {\r\n            setNewValue(node.value);\r\n        }\r\n    }, [node]);\r\n\r\n    const saveHandler = () => {\r\n        if (node) {\r\n            onSave(node.id, newValue);\r\n        } else if (parentId) {\r\n            onSave(parentId, newValue);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Container>\r\n            <Content>\r\n                {(node) ? <Header>Edit {node.value}</Header> : <Header>Add child node for {parentNode && parentNode.value}</Header>}\r\n                \r\n                <form onSubmit={saveHandler}>\r\n                    <div>\r\n                        <Input fullWidth value={newValue} onChange={handleChange} />\r\n                    </div>\r\n                    <Footer>\r\n                        <Button onClick={onClose}>Cancel</Button>\r\n                        <Button type=\"submit\" variant=\"contained\" disabled={!newValue}>OK</Button>\r\n                    </Footer>\r\n                </form>\r\n            </Content>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default CacheNodeEditor;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Container = styled.div`\r\n    position: absolute;\r\n    top: 0;\r\n    right: 0;\r\n    display: flex;\r\n    justify-content: center;\r\n    background-color: #fff;\r\n    height: 100%;\r\n    padding: 20px;\r\n    width: 400px;\r\n    border-top-right-radius: 4px;\r\n    border-bottom-right-radius: 4px;\r\n    z-index: 2;\r\n`;\r\n\r\nconst Content = styled.div`\r\n    width: 300px;\r\n`;\r\n\r\nconst Sidebar: React.FC = ({children}) => {\r\n    return (\r\n        <Container>\r\n            <Content>\r\n                {children}\r\n            </Content>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default Sidebar;\r\n","import React from 'react';\r\nimport {useSelector} from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport Button from '@material-ui/core/Button';\r\nimport Sidebar from './Sidebar';\r\nimport { RootState } from '../reducers';\r\n\r\ninterface Props {\r\n    nodeId: string;\r\n    onDelete: (nodeId: string) => void;\r\n    onClose: () => void;\r\n}\r\n\r\nconst Header = styled.h4`\r\n    margin-top: 5px;\r\n    margin-bottom: 25px;\r\n`;\r\n\r\nconst Footer = styled.div`\r\n    display: flex;\r\n    justify-content: flex-end;\r\n    padding: 10px 0;\r\n    margin-top: 25px;\r\n\r\n    & .MuiButtonBase-root {\r\n        margin-right: 8px;\r\n    }\r\n`;\r\n\r\nconst CacheNodeDelete: React.FC<Props> = ({nodeId, onDelete, onClose}) => {\r\n    const node = useSelector((s: RootState) => s.cache.table[nodeId]);\r\n\r\n    const okHandler = () => {\r\n        onDelete(node.id);\r\n    };\r\n\r\n    return (\r\n        <Sidebar>\r\n            <Header>Delete {node.value}</Header>\r\n            <div>\r\n                Node will be mark as deleted. Are you sure?\r\n            </div>\r\n            <Footer>\r\n                <Button onClick={onClose}>Cancel</Button>\r\n                <Button variant=\"contained\" onClick={okHandler}>OK</Button>\r\n            </Footer>\r\n        </Sidebar>\r\n    );\r\n};\r\n\r\nexport default CacheNodeDelete;\r\n","import React, {useCallback} from 'react';\r\nimport {useDispatch} from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport TreeView from '@material-ui/lab/TreeView';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport TreeItem from '@material-ui/lab/TreeItem';\r\nimport Button from '@material-ui/core/Button';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\nimport CacheNodeEditor from './CacheNodeEditor';\r\nimport {editNode, addNode, deleteNode} from '../actions/cache';\r\nimport CacheNodeDelete from './CacheNodeDelete';\r\nimport NodeState from '../models/nodeState';\r\n\r\ninterface Props {\r\n    cacheTree: any;\r\n    expanded: string[];\r\n}\r\n\r\ninterface RenderTree {\r\n    id: string;\r\n    parentId: string | null;\r\n    value: string;\r\n    state: NodeState;\r\n    children?: RenderTree[];\r\n}\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 300px;\r\n  border: 1px solid #c0c0c0;\r\n  border-radius: 2px;\r\n`;\r\n\r\nconst TreeViewContainer = styled.div`\r\n  flex: 1;\r\n  width: 250px;\r\n  height: 250px;\r\n  padding: 10px;\r\n  overflow-y: auto;\r\n`;\r\n\r\nconst TreeViewToolbar = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  padding: 5px;\r\n`;\r\n\r\nconst StyledTreeItem = styled(TreeItem)<{state: NodeState}>`\r\n  ${({state}) => state === NodeState.Deleted && `\r\n    color: #c0c0c0;\r\n\r\n    & div.MuiTreeItem-label:hover {\r\n      background-color: #fff;\r\n    }\r\n\r\n    & div.MuiTreeItem-label {\r\n      background-color: #fff !important;\r\n      cursor: default;\r\n    }\r\n  `}\r\n\r\n  ${({state}) => state === NodeState.New && `\r\n    color: green;\r\n  `}\r\n\r\n  ${({state}) => state === NodeState.Changed && `\r\n    color: orange;\r\n  `}\r\n`;\r\n\r\nlet selected = '';\r\n\r\nconst CacheTreeView: React.FC<Props> = ({cacheTree, expanded}) => {\r\n    const dispatch = useDispatch();\r\n\r\n    const [expandedNodes, setExpandedNodes] = React.useState<string[]>([]);\r\n    const [operation, setOperation] = React.useState<string>('');\r\n\r\n    React.useEffect(() => {\r\n      setExpandedNodes(expanded);\r\n    }, [expanded]);\r\n\r\n    const onNodeSelect = (event: any, nodeId: string) => {\r\n      const nodeElement: Element = event.target.closest('.MuiTreeItem-root');\r\n      const nodeState = nodeElement.getAttribute('state');\r\n\r\n      if (nodeState === NodeState.Deleted) {\r\n        selected = '';\r\n      } else {\r\n        selected = nodeId;\r\n      }\r\n\r\n      setOperation('');\r\n    };\r\n\r\n    const onNodeToggle = (event: any, nodeIds: string[]) => {\r\n      setExpandedNodes(nodeIds);\r\n    };\r\n\r\n    const onLabelClick = useCallback((event: any) => {\r\n      event.preventDefault();\r\n    }, []);\r\n\r\n    const onEditNodeHandler = useCallback(() => {\r\n      setOperation('edit');\r\n    }, []);\r\n\r\n    const onAddNodeHandler = useCallback(() => {\r\n      setOperation('add');\r\n    }, []);\r\n\r\n    const onDeleteNodeHandler = useCallback(() => {\r\n      setOperation('delete');\r\n    }, []);\r\n\r\n    const onCloseEdit = useCallback(() => {\r\n      setOperation('');\r\n    }, []);\r\n\r\n    const changeNodeHandler = useCallback((id: string, value: string) => {\r\n      dispatch(editNode(id, value));\r\n      setOperation('');\r\n    }, [dispatch]);\r\n\r\n    const addNodeHandler = useCallback((parentId: string, value: string) => {\r\n      dispatch(addNode(parentId, value));\r\n      setOperation('');\r\n    }, [dispatch]);\r\n\r\n    const deleteNodeHandler = useCallback((id: string) => {\r\n      dispatch(deleteNode(id));\r\n      setOperation('');\r\n    }, [dispatch]);\r\n      \r\n    const renderTree = (node: RenderTree) => (\r\n      <StyledTreeItem state={node.state} key={node.id} nodeId={node.id} label={node.value} onLabelClick={onLabelClick}>\r\n        {Array.isArray(node.children) && node.children.map((node) => renderTree(node))}\r\n      </StyledTreeItem>\r\n    );\r\n\r\n    return (\r\n      <div>\r\n        <Container>\r\n          <TreeViewContainer>\r\n              {\r\n                cacheTree && <TreeView\r\n                    defaultCollapseIcon={<ExpandMoreIcon />}\r\n                    expanded={expandedNodes}\r\n                    defaultExpandIcon={<ChevronRightIcon />}\r\n                    onNodeSelect={onNodeSelect}\r\n                    onNodeToggle={onNodeToggle}\r\n                >\r\n                  {cacheTree.map((node: RenderTree) => renderTree(node))}\r\n                </TreeView>\r\n              }\r\n          </TreeViewContainer>\r\n          <TreeViewToolbar>\r\n            <ButtonGroup color=\"primary\">\r\n              <Button size=\"small\" onClick={onEditNodeHandler}>edit</Button>\r\n              <Button size=\"small\" onClick={onAddNodeHandler}>add</Button>\r\n              <Button size=\"small\" onClick={onDeleteNodeHandler}>delete</Button>\r\n            </ButtonGroup>\r\n          </TreeViewToolbar>\r\n        </Container>\r\n        \r\n        { operation === 'edit' && selected && <CacheNodeEditor nodeId={selected} onSave={changeNodeHandler} onClose={onCloseEdit} /> }\r\n        { operation === 'add' && selected && <CacheNodeEditor parentId={selected} onSave={addNodeHandler} onClose={onCloseEdit} /> }\r\n        { operation === 'delete' && selected && <CacheNodeDelete nodeId={selected} onDelete={deleteNodeHandler} onClose={onCloseEdit} /> }\r\n      </div>\r\n    );\r\n};\r\n\r\n\r\nexport default CacheTreeView;\r\n","import {createSelector} from 'reselect';\r\nimport DbTable from '../models/dbTable';\r\nimport { RootState } from '../reducers';\r\nimport dbToTree from '../utils/dbToTree';\r\n\r\nexport const getCache = (state: RootState) => state.cache.table;\r\nexport const getDatabase = (state: RootState) => state.database.table;\r\n\r\nexport const getCacheTree = createSelector(\r\n    getCache,\r\n    (cache: DbTable) => {\r\n        return dbToTree(cache);\r\n    }\r\n);\r\n\r\nexport const getDatabaseTree = createSelector(\r\n    getDatabase,\r\n    (database: DbTable) => {\r\n        return dbToTree(database)[0];\r\n    }\r\n);\r\n\r\nexport const getCacheNodeIds = createSelector(\r\n    getCache,\r\n    (cache: DbTable) => {\r\n        return Object.keys(cache);\r\n    }\r\n)\r\n\r\n","import React from 'react';\r\nimport {useSelector, useDispatch} from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport DbTreeView from './DbTreeView';\r\nimport CacheTreeView from './CacheTreeView';\r\nimport Button from '@material-ui/core/Button';\r\nimport {applyChangesToDb, resetDatabase} from '../actions/database';\r\nimport {getCacheTree, getDatabaseTree, getCacheNodeIds} from '../selectors';\r\n\r\nconst Container = styled(Paper)`\r\n    position: relative;\r\n`;\r\n\r\nconst EditorContent = styled.div`\r\n    display: flex;\r\n    justify-content: space-between;    \r\n    padding: 25px;\r\n    align-items: center;\r\n`;\r\n\r\nconst EditorFooter = styled.div`\r\n    display: flex;\r\n    justify-content: flex-end;\r\n    padding: 0 25px 25px 25px;\r\n\r\n    & .MuiButtonBase-root {\r\n        margin-left: 10px;\r\n    }\r\n`;\r\n\r\nconst DbEditor: React.FC = React.memo(() => {\r\n\r\n    const dispatch = useDispatch();\r\n    \r\n    const dbTree = useSelector(getDatabaseTree);\r\n    const cacheTree = useSelector(getCacheTree);\r\n    const cacheExpanded = useSelector(getCacheNodeIds);\r\n\r\n    const resetHandler = () => {\r\n        dispatch(resetDatabase());\r\n    };\r\n\r\n    const applyChanges = () => {\r\n        dispatch(applyChangesToDb());\r\n    };    \r\n\r\n    return (\r\n        <Container>\r\n            <EditorContent>\r\n                <CacheTreeView cacheTree={cacheTree} expanded={cacheExpanded} />\r\n                <DbTreeView dbTree={dbTree} />\r\n            </EditorContent>\r\n            <EditorFooter>\r\n                <Button onClick={resetHandler}>Reset</Button>\r\n                <Button variant=\"contained\" onClick={applyChanges}>Apply</Button>\r\n            </EditorFooter>\r\n        </Container>\r\n    );\r\n});\r\n\r\n\r\nexport default DbEditor;\r\n","import React from 'react';\nimport './App.css';\nimport styled from 'styled-components';\nimport DbEditor from './components/DbEditor';\n\nconst AppContainer = styled.div`\n  margin: 50px auto 0;\n  min-width: 600px;\n  max-width: 700px;\n`;\n\nfunction App() {\n  return (\n    <AppContainer>\n      <DbEditor></DbEditor>\n    </AppContainer>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {MOVE_NODE, ADD_NODE, CHANGE_NODE, CLEAR_CACHE, DELETE_NODE, CacheActions} from '../actions/cacheActionTypes';\r\nimport DbNode from '../models/dbNode';\r\n\r\ninterface CacheState {\r\n    table: {\r\n        [id: string]: DbNode;\r\n    },\r\n    sequence: {\r\n        prefix: string;\r\n        next: number;\r\n    }\r\n}\r\n\r\nconst initialState: CacheState = {\r\n    table: {},\r\n    sequence: {\r\n        prefix: 'node_',\r\n        next: 1\r\n    }\r\n};\r\n\r\nexport default function cacheReducer(state = initialState, action: CacheActions): CacheState {\r\n    switch (action.type) {\r\n        case MOVE_NODE:\r\n            return {\r\n                ...state,\r\n                table: {\r\n                    ...state.table,\r\n                    [action.payload.id]: action.payload\r\n                }\r\n            }\r\n\r\n        case CHANGE_NODE:\r\n            return {\r\n                ...state,\r\n                table: {\r\n                    ...state.table,\r\n                    [action.payload.id]: action.payload.node\r\n                }\r\n            }\r\n\r\n        case ADD_NODE:\r\n            return {\r\n                ...state,\r\n                table: {\r\n                    ...state.table,\r\n                    [action.payload.id]: action.payload.node\r\n                },\r\n                sequence: {\r\n                    ...state.sequence,\r\n                    next: state.sequence.next + 1\r\n                }\r\n            }\r\n\r\n        case DELETE_NODE:\r\n            return {\r\n                ...state,\r\n                table: {\r\n                    ...state.table,\r\n                    ...action.payload.nodes\r\n                }\r\n            }\r\n\r\n        case CLEAR_CACHE: {\r\n            return initialState;\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import DbNode from \"../models/dbNode\";\r\nimport {DatabaseActions, RESET_DATABASE, SET_SEQUENCE, APPLY_CHANGES, UPDATE_INDEX} from '../actions/databaseActionTypes';\r\nimport NodeState from \"../models/nodeState\";\r\nimport { createDbParentIndex } from \"../utils/dbToTree\";\r\nimport DbIndex from \"../models/dbIndex\";\r\n\r\ninterface DatabaseState {\r\n    table: {\r\n        [id: string]: DbNode;\r\n    },\r\n    index: DbIndex,\r\n    sequence: {\r\n        next: number;\r\n    }\r\n}\r\n\r\nconst table = {\r\n    '1': {id: '1', parentId: null, value: 'Node1', state: NodeState.Origin},\r\n    '2': {id: '2', parentId: '1', value: 'Node2', state: NodeState.Origin},\r\n    '3': {id: '3', parentId: '1', value: 'Node3', state: NodeState.Origin},\r\n    '4': {id: '4', parentId: '2', value: 'Node4', state: NodeState.Origin},\r\n    '5': {id: '5', parentId: '2', value: 'Node5', state: NodeState.Origin},\r\n    '6': {id: '6', parentId: '3', value: 'Node6', state: NodeState.Origin},\r\n    '7': {id: '7', parentId: '3', value: 'Node7', state: NodeState.Origin},\r\n    '8': {id: '8', parentId: '6', value: 'Node8', state: NodeState.Origin},\r\n};\r\n\r\nconst initialState: DatabaseState = {\r\n    table,\r\n    index: createDbParentIndex(table),\r\n    sequence: {\r\n        next: 9\r\n    }\r\n};\r\n\r\nexport default function databaseReducer(state: DatabaseState = initialState, action: DatabaseActions): DatabaseState {\r\n    switch (action.type) {\r\n        case APPLY_CHANGES:\r\n            return {\r\n                ...state,\r\n                table: {\r\n                    ...state.table,\r\n                    ...action.payload.changes\r\n                }\r\n            }\r\n\r\n        case UPDATE_INDEX:\r\n            return {\r\n                ...state,\r\n                index: action.payload.index\r\n            }\r\n\r\n        case SET_SEQUENCE:\r\n            return {\r\n                ...state,\r\n                sequence: {\r\n                    next: action.payload.next\r\n                }\r\n            }\r\n\r\n        case RESET_DATABASE:\r\n            return initialState;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport cache from './cache';\r\nimport database from './database';\r\n\r\nconst rootReducer = combineReducers({\r\n    cache,\r\n    database\r\n});\r\n\r\nexport default rootReducer;\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\n","import { applyMiddleware, createStore, Store } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer, {RootState} from '../reducers';\r\n\r\nconst middlewares = [thunk];\r\n\r\nconst store: Store<RootState> = createStore(rootReducer, {}, applyMiddleware(...middlewares));\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\n\nReactDOM.render(\n  <Provider store={store}>\n      <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}